name: Publish QPM Package

on:
  push:
    tags:
      - 'v*'

jobs:
  publish:
    env:
      module_id: songloader
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      name: Checkout
      with:
        submodules: true
        lfs: true
    #- name: Install Powershell
    #  run: sudo apt-get install -y powershell
    
    #- name: Setup NDK
    #  id: setup-ndk
    #  uses: nttld/setup-ndk@v1.0.3
    #  with:
    #    ndk-version: r22
      
    #- name: Create ndkpath.txt
    #  run: echo ${{ steps.setup-ndk.outputs.ndk-path }} > ${GITHUB_WORKSPACE}/ndkpath.txt

    - name: Create ndkpath.txt
      run: |
        echo "$ANDROID_NDK_LATEST_HOME" > ${GITHUB_WORKSPACE}/ndkpath.txt

#     - name: Cache QPM
#       id: cache-qpm
#       uses: actions/cache@v2
#       env:
#         cache-name: cache-qpm
#       with:
#         path: QPM
#         key: ${{ runner.os }}-${{ env.cache-name }}-2
#         restore-keys: |
#           ${{ runner.os }}-${{ env.cache-name }}-2

    - name: Get QPM
      if: steps.cache-qpm.outputs.cache-hit != 'true'
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: main.yml
        name: QPM-ubuntu-x64
        path: QPM
        repo: sc2ad/QuestPackageManager
      
    - name: QPM Collect
      run: |
        chmod +x ./QPM/QPM
        ./QPM/QPM collect
    
    - name: QPM Dependencies Cache
      id: cache-qpm-deps
      uses: actions/cache@v2
      env:
        cache-name: cache-qpm-deps
      with:
        path: QPM_Temp
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('qpm.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
      
    - name: QPM Restore
#       if: steps.cache-qpm-deps.outputs.cache-hit != 'true'
      run: ./QPM/QPM restore
    - name: List Post Restore
      run: |
        ls -la ${GITHUB_WORKSPACE}/extern/
        ls -la QPM_Temp
        
    - name: Get Tag Version
      id: get_tag_version
      run: |
        echo ${GITHUB_REF#refs/tags/}
        echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}
        echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/v}
      
    - name: QPM Edit Version
      run: |
        ./QPM/QPM package edit version "${{ steps.get_tag_version.outputs.VERSION }}"
        
    - name: Build
      run: |
        cd ${GITHUB_WORKSPACE}
        pwsh -Command ./build.ps1
        
    # Commit the change to the package, .vscode/c_cpp_properties.json, and Android.mk
    - name: Configure commit
      run: |
        git config user.name "Github Actions"
        git config user.email "<>"
    - name: Commit Edit Version
      run: |
        git add ./Android.mk qpm.json
        git commit -m "Update Version and post restore"
    # Then, we want to use the commit we have just made, and force push our tag to that commit
    - name: Get Commit ID
      id: get_commit_id
      run: |
        echo `git rev-parse HEAD`
        echo ::set-output name=ID::`git rev-parse HEAD`
    - name: Force create tag
      run: |
        git tag --force ${{ steps.get_tag_version.outputs.TAG }} ${{ steps.get_commid_id.outputs.ID }}
    # Then, push, upload our artifacts, modify the config file to have soLink and debugSoLink
    - name: Create and push version specific branch
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git branch version-${{ steps.get_tag_version.outputs.TAG }}
        git push -u origin version-${{ steps.get_tag_version.outputs.TAG }} --force --tags
    # Get release that was created for this tag
    - name: Get Release
      uses: octokit/request-action@v2.x
      id: get_release
      with:
          route: GET /repos/:repository/releases/tags/${{ steps.get_tag_version.outputs.TAG }}
          repository: ${{ github.repository }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Get Release Upload URL
      id: get_upload_url
      run: |
        url=$(echo "$response" | jq -r '.upload_url')
        echo $url
        echo "::set-output name=upload_url::$url"
      env: 
          response:  ${{ steps.get_release.outputs.data }}
    - name: Get Library Name
      id: libname
      run: |
        cd ./libs/arm64-v8a/
        pattern="lib${module_id}*.so"
        files=( $pattern )
        echo ::set-output name=NAME::"${files[0]}"
    # Upload our release assets
    - name: Upload Release Asset
      id: upload_release_asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
        asset_path: ./libs/arm64-v8a/${{ steps.libname.outputs.NAME }}
        asset_name: ${{ steps.libname.outputs.NAME }}
        asset_content_type: application/octet-stream
    - name: Upload Debug Asset
      id: upload_debug_asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
        asset_path: ./obj/local/arm64-v8a/${{ steps.libname.outputs.NAME }}
        asset_name: debug_${{ steps.libname.outputs.NAME }}
        asset_content_type: application/octet-stream
        
    - name: Change QPM Package Info
      run: |
        ./QPM/QPM package edit-extra "branchName" "version-${{ steps.get_tag_version.outputs.TAG }}"
        ./QPM/QPM package edit-extra "soLink" "${{ steps.upload_release_asset.outputs.browser_download_url }}"
        ./QPM/QPM package edit-extra "debugSoLink" "${{ steps.upload_debug_asset.outputs.browser_download_url }}"
    - name: Commit Changed package info
      run: |
        git add qpm.json
        git commit -m "Updated qpm.json"
      
    # Then, we want to use the commit we have just made, and force push our tag to that commit
    - name: Get Commit ID
      id: get_created_commit_id
      run: |
        echo `git rev-parse HEAD`
        echo ::set-output name=ID::`git rev-parse HEAD`
      
    - name: Push New Commit and Tag
      run: |
        git push origin HEAD:version-${{ steps.get_tag_version.outputs.TAG }} --force
        git tag --force ${{ steps.get_tag_version.outputs.TAG }} ${{ steps.get_created_commit_id.outputs.ID }}
        git push --tags --force
        
#     - name: Merge this branch into whatever branch we were originally built off of.
#       TODO
        
    - name: QPM Publish
      run: ./QPM/QPM publish